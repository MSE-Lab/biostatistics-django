# Generated by Django 4.2.24 on 2025-09-16 02:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[
                            ("admin", "管理员"),
                            ("teacher", "教师"),
                            ("student", "学生"),
                        ],
                        default="student",
                        max_length=10,
                        verbose_name="用户类型",
                    ),
                ),
                ("real_name", models.CharField(max_length=50, verbose_name="真实姓名")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "用户",
                "verbose_name_plural": "用户",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Class",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("bio_elite", "生物科学（拔尖计划2.0基地班）"),
                            ("bio_base", "生物科学（国家生物学基地班）"),
                            ("biotech_base", "生物技术（国家生命科学与技术基地班）"),
                            ("bio_science", "生物科学"),
                            ("bio_technology", "生物技术"),
                        ],
                        max_length=20,
                        unique=True,
                        verbose_name="专业班级",
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="班级描述")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
            ],
            options={
                "verbose_name": "专业班级",
                "verbose_name_plural": "专业班级",
            },
        ),
        migrations.CreateModel(
            name="ForumCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="分类名称"
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="分类描述")),
                (
                    "icon",
                    models.CharField(
                        default="💬", max_length=50, verbose_name="分类图标"
                    ),
                ),
                ("order", models.PositiveIntegerField(default=0, verbose_name="排序")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="是否启用"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
            ],
            options={
                "verbose_name": "讨论区分类",
                "verbose_name_plural": "讨论区分类",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="ForumPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="标题")),
                ("content", models.TextField(verbose_name="内容")),
                (
                    "post_type",
                    models.CharField(
                        choices=[
                            ("discussion", "讨论帖"),
                            ("question", "问答帖"),
                            ("announcement", "公告帖"),
                        ],
                        default="discussion",
                        max_length=20,
                        verbose_name="帖子类型",
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(default=False, verbose_name="是否置顶"),
                ),
                (
                    "is_locked",
                    models.BooleanField(default=False, verbose_name="是否锁定"),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(default=0, verbose_name="浏览次数"),
                ),
                (
                    "reply_count",
                    models.PositiveIntegerField(default=0, verbose_name="回复数量"),
                ),
                (
                    "last_reply_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后回复时间"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="作者",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.forumcategory",
                        verbose_name="分类",
                    ),
                ),
                (
                    "last_reply_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_replies",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="最后回复者",
                    ),
                ),
            ],
            options={
                "verbose_name": "讨论帖子",
                "verbose_name_plural": "讨论帖子",
                "ordering": ["-is_pinned", "-last_reply_at", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="VideoResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="视频标题")),
                ("description", models.TextField(verbose_name="视频描述")),
                (
                    "thumbnail",
                    models.ImageField(
                        upload_to="video_thumbnails/", verbose_name="视频缩略图"
                    ),
                ),
                (
                    "video_url",
                    models.URLField(
                        help_text="支持YouTube、Bilibili等视频平台链接",
                        verbose_name="视频链接",
                    ),
                ),
                (
                    "embed_url",
                    models.URLField(
                        blank=True,
                        help_text="用于模态框播放的嵌入链接",
                        verbose_name="嵌入播放链接",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("lecture", "课程讲座"),
                            ("tutorial", "教程演示"),
                            ("case_study", "案例分析"),
                            ("software", "软件操作"),
                            ("other", "其他"),
                        ],
                        default="lecture",
                        max_length=20,
                        verbose_name="视频分类",
                    ),
                ),
                (
                    "duration",
                    models.CharField(
                        blank=True,
                        help_text="格式：mm:ss 或 hh:mm:ss",
                        max_length=20,
                        verbose_name="视频时长",
                    ),
                ),
                (
                    "view_count",
                    models.PositiveIntegerField(default=0, verbose_name="观看次数"),
                ),
                (
                    "is_featured",
                    models.BooleanField(default=False, verbose_name="是否推荐"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        limit_choices_to={"user_type": "admin"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
            ],
            options={
                "verbose_name": "视频资源",
                "verbose_name_plural": "视频资源",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TeachingClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="例如：202420241YN301018000701",
                        max_length=100,
                        unique=True,
                        verbose_name="教学班编号",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="教学班描述"),
                ),
                (
                    "class_time",
                    models.CharField(
                        default="待安排",
                        help_text="例如：周二 8:00-10:00, 周四 14:00-16:00",
                        max_length=200,
                        verbose_name="上课时间",
                    ),
                ),
                (
                    "class_location",
                    models.CharField(
                        default="待安排",
                        help_text="例如：生科楼201教室",
                        max_length=100,
                        verbose_name="上课地点",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(blank=True, null=True, verbose_name="开课日期"),
                ),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="结课日期"),
                ),
                (
                    "max_students",
                    models.PositiveIntegerField(
                        default=50,
                        help_text="该教学班的最大学生容量",
                        verbose_name="选课人数",
                    ),
                ),
                (
                    "teaching_status",
                    models.CharField(
                        choices=[
                            ("open", "开课"),
                            ("in_progress", "进行中"),
                            ("finished", "结课"),
                        ],
                        default="open",
                        max_length=20,
                        verbose_name="教学状态",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        limit_choices_to={"user_type": "teacher"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建教师",
                    ),
                ),
            ],
            options={
                "verbose_name": "教学班",
                "verbose_name_plural": "教学班",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TeacherProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        choices=[
                            ("professor", "教授"),
                            ("associate_professor", "副教授"),
                            ("researcher", "研究员"),
                            ("associate_researcher", "副研究员"),
                            ("lecturer", "讲师"),
                            ("assistant", "助教"),
                        ],
                        max_length=20,
                        verbose_name="职称",
                    ),
                ),
                (
                    "degree",
                    models.CharField(
                        choices=[
                            ("phd", "博士"),
                            ("master", "硕士"),
                            ("bachelor", "学士"),
                        ],
                        max_length=10,
                        verbose_name="学位",
                    ),
                ),
                ("major", models.CharField(max_length=100, verbose_name="专业")),
                ("research_direction", models.TextField(verbose_name="研究方向")),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="teacher_photos/",
                        verbose_name="形象照",
                    ),
                ),
                ("bio", models.TextField(blank=True, verbose_name="个人简介")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        limit_choices_to={"user_type": "teacher"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "教师信息",
                "verbose_name_plural": "教师信息",
            },
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "男"), ("female", "女")],
                        max_length=10,
                        verbose_name="性别",
                    ),
                ),
                (
                    "student_id",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="学号必须是10-20位数字", regex="^\\d{10,20}$"
                            )
                        ],
                        verbose_name="学号",
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        default="2024",
                        max_length=4,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="年级必须是4位年份格式，如2022",
                                regex="^20\\d{2}$",
                            )
                        ],
                        verbose_name="年级",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "student_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.class",
                        verbose_name="专业班级",
                    ),
                ),
                (
                    "teaching_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.teachingclass",
                        verbose_name="教学班",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        limit_choices_to={"user_type": "student"},
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "学生信息",
                "verbose_name_plural": "学生信息",
            },
        ),
        migrations.CreateModel(
            name="ForumReply",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField(verbose_name="回复内容")),
                (
                    "is_best_answer",
                    models.BooleanField(default=False, verbose_name="是否为最佳答案"),
                ),
                (
                    "like_count",
                    models.PositiveIntegerField(default=0, verbose_name="点赞数"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="回复者",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.forumreply",
                        verbose_name="父回复",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="core.forumpost",
                        verbose_name="帖子",
                    ),
                ),
            ],
            options={
                "verbose_name": "帖子回复",
                "verbose_name_plural": "帖子回复",
                "ordering": ["-is_best_answer", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="ForumLike",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="点赞时间"),
                ),
                (
                    "reply",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.forumreply",
                        verbose_name="回复",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="用户",
                    ),
                ),
            ],
            options={
                "verbose_name": "点赞记录",
                "verbose_name_plural": "点赞记录",
                "unique_together": {("user", "reply")},
            },
        ),
    ]
